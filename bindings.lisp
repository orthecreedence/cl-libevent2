;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.8
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :libevent2)



(cl:defconstant #.(lispify "AF_UNSPEC" 'constant) 0)

(cl:defconstant #.(lispify "AF_UNIX" 'constant) 1)

(cl:defconstant #.(lispify "AF_INET" 'constant) 2)

(cffi:defcstruct #.(lispify "timeval" 'classname)
	(#.(lispify "tv_sec" 'slotname) :long)
	(#.(lispify "tv_usec" 'slotname) :long))

(cffi:defcstruct #.(lispify "sockaddr_in" 'classname)
	(#.(lispify "sin_family" 'slotname) :unsigned-short)
	(#.(lispify "sin_port" 'slotname) :unsigned-short)
	(#.(lispify "sin_addr" 'slotname) :unsigned-long)
	(#.(lispify "sin_zero_0" 'slotname) :char)
	(#.(lispify "sin_zero_1" 'slotname) :char)
	(#.(lispify "sin_zero_2" 'slotname) :char)
	(#.(lispify "sin_zero_3" 'slotname) :char)
	(#.(lispify "sin_zero_4" 'slotname) :char)
	(#.(lispify "sin_zero_5" 'slotname) :char)
	(#.(lispify "sin_zero_6" 'slotname) :char)
	(#.(lispify "sin_zero_7" 'slotname) :char))

(cl:defconstant #.(lispify "_EVENT_HAVE_FCNTL_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_GETTIMEOFDAY" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_INTTYPES_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_MEMORY_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_PUTENV" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_SIGNAL" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STDARG_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STDDEF_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STDINT_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STDLIB_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STRINGS_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STRING_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STRTOLL" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STRUCT_ADDRINFO" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STRUCT_IN6_ADDR" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STRUCT_IN6_ADDR_S6_ADDR16" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STRUCT_IN6_ADDR_S6_ADDR32" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STRUCT_SOCKADDR_IN6" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STRUCT_SOCKADDR_STORAGE" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_SYS_PARAM_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_SYS_STAT_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_SYS_TIME_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_SYS_TYPES_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_TIMERCLEAR" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_TIMERCMP" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_TIMERISSET" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_UINT16_T" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_UINT32_T" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_UINT64_T" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_UINT8_T" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_UINTPTR_T" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_UMASK" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_HAVE_UNISTD_H" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_NUMERIC_VERSION" 'constant) #x02001400)

(cl:defconstant #.(lispify "_EVENT_PACKAGE" 'constant) "libevent")

(cl:defconstant #.(lispify "_EVENT_PACKAGE_BUGREPORT" 'constant) "\0")

(cl:defconstant #.(lispify "_EVENT_PACKAGE_NAME" 'constant) "\0")

(cl:defconstant #.(lispify "_EVENT_PACKAGE_STRING" 'constant) "\0")

(cl:defconstant #.(lispify "_EVENT_PACKAGE_TARNAME" 'constant) "\0")

(cl:defconstant #.(lispify "_EVENT_PACKAGE_URL" 'constant) "\0")

(cl:defconstant #.(lispify "_EVENT_PACKAGE_VERSION" 'constant) "\0")

(cl:defconstant #.(lispify "_EVENT_SIZEOF_INT" 'constant) 4)

(cl:defconstant #.(lispify "_EVENT_SIZEOF_LONG" 'constant) 4)

(cl:defconstant #.(lispify "_EVENT_SIZEOF_LONG_LONG" 'constant) 8)

(cl:defconstant #.(lispify "_EVENT_SIZEOF_SHORT" 'constant) 2)

(cl:defconstant #.(lispify "_EVENT_SIZEOF_SIZE_T" 'constant) 4)

(cl:defconstant #.(lispify "_EVENT_SIZEOF_VOID_P" 'constant) 4)

(cl:defconstant #.(lispify "_EVENT_STDC_HEADERS" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_TIME_WITH_SYS_TIME" 'constant) 1)

(cl:defconstant #.(lispify "EV_UINT8_MAX" 'constant) 255)

(cl:defconstant #.(lispify "EV_INT8_MAX" 'constant) 127)

(cl:defconstant #.(lispify "EV_INT8_MIN" 'constant) (cl:- (- 127) 1))

(cffi:defcfun ("evutil_socketpair" #.(lispify "evutil_socketpair" 'function)) :int
  (d :int)
  (type :int)
  (protocol :int)
  (sv :pointer))

(cffi:defcfun ("evutil_make_socket_nonblocking" #.(lispify "evutil_make_socket_nonblocking" 'function)) :int
  (sock :int))

(cffi:defcfun ("evutil_make_listen_socket_reuseable" #.(lispify "evutil_make_listen_socket_reuseable" 'function)) :int
  (sock :int))

(cffi:defcfun ("evutil_make_socket_closeonexec" #.(lispify "evutil_make_socket_closeonexec" 'function)) :int
  (sock :int))

(cffi:defcfun ("evutil_closesocket" #.(lispify "evutil_closesocket" 'function)) :int
  (sock :int))

(cffi:defcfun ("evutil_strtoll" #.(lispify "evutil_strtoll" 'function)) :pointer
  (s :string)
  (endptr :pointer)
  (base :int))

(cffi:defcfun ("evutil_snprintf" #.(lispify "evutil_snprintf" 'function)) :int
  (buf :string)
  (buflen :unsigned-int)
  (format :string)
  &rest)

(cffi:defcfun ("evutil_vsnprintf" #.(lispify "evutil_vsnprintf" 'function)) :int
  (buf :string)
  (buflen :unsigned-int)
  (format :string)
  (ap :pointer))

(cffi:defcfun ("evutil_inet_ntop" #.(lispify "evutil_inet_ntop" 'function)) :string
  (af :int)
  (src :pointer)
  (dst :string)
  (len :unsigned-int))

(cffi:defcfun ("evutil_inet_pton" #.(lispify "evutil_inet_pton" 'function)) :int
  (af :int)
  (src :string)
  (dst :pointer))

(cffi:defcfun ("evutil_parse_sockaddr_port" #.(lispify "evutil_parse_sockaddr_port" 'function)) :int
  (str :string)
  (out :pointer)
  (outlen :pointer))

(cffi:defcfun ("evutil_sockaddr_cmp" #.(lispify "evutil_sockaddr_cmp" 'function)) :int
  (sa1 :pointer)
  (sa2 :pointer)
  (include_port :int))

(cffi:defcfun ("evutil_ascii_strcasecmp" #.(lispify "evutil_ascii_strcasecmp" 'function)) :int
  (str1 :string)
  (str2 :string))

(cffi:defcfun ("evutil_ascii_strncasecmp" #.(lispify "evutil_ascii_strncasecmp" 'function)) :int
  (str1 :string)
  (str2 :string)
  (n :unsigned-int))

(cl:defconstant #.(lispify "EVUTIL_EAI_ADDRFAMILY" 'constant) -901)

(cl:defconstant #.(lispify "EVUTIL_EAI_AGAIN" 'constant) -902)

(cl:defconstant #.(lispify "EVUTIL_EAI_BADFLAGS" 'constant) -903)

(cl:defconstant #.(lispify "EVUTIL_EAI_FAIL" 'constant) -904)

(cl:defconstant #.(lispify "EVUTIL_EAI_FAMILY" 'constant) -905)

(cl:defconstant #.(lispify "EVUTIL_EAI_MEMORY" 'constant) -906)

(cl:defconstant #.(lispify "EVUTIL_EAI_NODATA" 'constant) -907)

(cl:defconstant #.(lispify "EVUTIL_EAI_NONAME" 'constant) -908)

(cl:defconstant #.(lispify "EVUTIL_EAI_SERVICE" 'constant) -909)

(cl:defconstant #.(lispify "EVUTIL_EAI_SOCKTYPE" 'constant) -910)

(cl:defconstant #.(lispify "EVUTIL_EAI_SYSTEM" 'constant) -911)

(cl:defconstant #.(lispify "EVUTIL_EAI_CANCEL" 'constant) -90001)

(cl:defconstant #.(lispify "EVUTIL_AI_PASSIVE" 'constant) #x1000)

(cl:defconstant #.(lispify "EVUTIL_AI_CANONNAME" 'constant) #x2000)

(cl:defconstant #.(lispify "EVUTIL_AI_NUMERICHOST" 'constant) #x4000)

(cl:defconstant #.(lispify "EVUTIL_AI_NUMERICSERV" 'constant) #x8000)

(cl:defconstant #.(lispify "EVUTIL_AI_V4MAPPED" 'constant) #x10000)

(cl:defconstant #.(lispify "EVUTIL_AI_ALL" 'constant) #x20000)

(cl:defconstant #.(lispify "EVUTIL_AI_ADDRCONFIG" 'constant) #x40000)

(cffi:defcfun ("evutil_getaddrinfo" #.(lispify "evutil_getaddrinfo" 'function)) :int
  (nodename :string)
  (servname :string)
  (hints_in :pointer)
  (res :pointer))

(cffi:defcfun ("evutil_freeaddrinfo" #.(lispify "evutil_freeaddrinfo" 'function)) :void
  (ai :pointer))

(cffi:defcfun ("evutil_gai_strerror" #.(lispify "evutil_gai_strerror" 'function)) :string
  (err :int))

(cffi:defcfun ("evutil_secure_rng_get_bytes" #.(lispify "evutil_secure_rng_get_bytes" 'function)) :void
  (buf :pointer)
  (n :unsigned-int))

(cffi:defcfun ("evutil_secure_rng_init" #.(lispify "evutil_secure_rng_init" 'function)) :int)

(cffi:defcfun ("evutil_secure_rng_add_bytes" #.(lispify "evutil_secure_rng_add_bytes" 'function)) :void
  (dat :string)
  (datlen :unsigned-int))

(cffi:defcfun ("event_enable_debug_mode" #.(lispify "event_enable_debug_mode" 'function)) :void)

(cffi:defcfun ("event_debug_unassign" #.(lispify "event_debug_unassign" 'function)) :void
  (arg0 :pointer))

(cffi:defcfun ("event_base_new" #.(lispify "event_base_new" 'function)) :pointer)

(cffi:defcfun ("event_reinit" #.(lispify "event_reinit" 'function)) :int
  (base :pointer))

(cffi:defcfun ("event_base_dispatch" #.(lispify "event_base_dispatch" 'function)) :int
  (arg0 :pointer))

(cffi:defcfun ("event_base_get_method" #.(lispify "event_base_get_method" 'function)) :string
  (arg0 :pointer))

(cffi:defcfun ("event_get_supported_methods" #.(lispify "event_get_supported_methods" 'function)) :pointer)

(cffi:defcfun ("event_config_new" #.(lispify "event_config_new" 'function)) :pointer)

(cffi:defcfun ("event_config_free" #.(lispify "event_config_free" 'function)) :void
  (cfg :pointer))

(cffi:defcfun ("event_config_avoid_method" #.(lispify "event_config_avoid_method" 'function)) :int
  (cfg :pointer)
  (method :string))

(cffi:defcenum #.(lispify "event_method_feature" 'enumname)
	(#.(lispify "EV_FEATURE_ET" 'enumvalue :keyword) #.#x01)
	(#.(lispify "EV_FEATURE_O1" 'enumvalue :keyword) #.#x02)
	(#.(lispify "EV_FEATURE_FDS" 'enumvalue :keyword) #.#x04))

(cffi:defcenum #.(lispify "event_base_config_flag" 'enumname)
	(#.(lispify "EVENT_BASE_FLAG_NOLOCK" 'enumvalue :keyword) #.#x01)
	(#.(lispify "EVENT_BASE_FLAG_IGNORE_ENV" 'enumvalue :keyword) #.#x02)
	(#.(lispify "EVENT_BASE_FLAG_STARTUP_IOCP" 'enumvalue :keyword) #.#x04)
	(#.(lispify "EVENT_BASE_FLAG_NO_CACHE_TIME" 'enumvalue :keyword) #.#x08)
	(#.(lispify "EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST" 'enumvalue :keyword) #.#x10))

(cffi:defcfun ("event_base_get_features" #.(lispify "event_base_get_features" 'function)) :int
  (base :pointer))

(cffi:defcfun ("event_config_require_features" #.(lispify "event_config_require_features" 'function)) :int
  (cfg :pointer)
  (feature :int))

(cffi:defcfun ("event_config_set_flag" #.(lispify "event_config_set_flag" 'function)) :int
  (cfg :pointer)
  (flag :int))

(cffi:defcfun ("event_config_set_num_cpus_hint" #.(lispify "event_config_set_num_cpus_hint" 'function)) :int
  (cfg :pointer)
  (cpus :int))

(cffi:defcfun ("event_base_new_with_config" #.(lispify "event_base_new_with_config" 'function)) :pointer
  (arg0 :pointer))

(cffi:defcfun ("event_base_free" #.(lispify "event_base_free" 'function)) :void
  (arg0 :pointer))

(cl:defconstant #.(lispify "EVENT_LOG_DEBUG" 'constant) 0)

(cl:defconstant #.(lispify "EVENT_LOG_MSG" 'constant) 1)

(cl:defconstant #.(lispify "EVENT_LOG_WARN" 'constant) 2)

(cl:defconstant #.(lispify "EVENT_LOG_ERR" 'constant) 3)

(cl:defconstant #.(lispify "_EVENT_LOG_DEBUG" 'constant) 0)

(cl:defconstant #.(lispify "_EVENT_LOG_MSG" 'constant) 1)

(cl:defconstant #.(lispify "_EVENT_LOG_WARN" 'constant) 2)

(cl:defconstant #.(lispify "_EVENT_LOG_ERR" 'constant) 3)

(cffi:defcfun ("event_set_log_callback" #.(lispify "event_set_log_callback" 'function)) :void
  (cb :pointer))

(cffi:defcfun ("event_set_fatal_callback" #.(lispify "event_set_fatal_callback" 'function)) :void
  (cb :pointer))

(cffi:defcfun ("event_base_set" #.(lispify "event_base_set" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:defconstant #.(lispify "EVLOOP_ONCE" 'constant) #x01)

(cl:defconstant #.(lispify "EVLOOP_NONBLOCK" 'constant) #x02)

(cffi:defcfun ("event_base_loop" #.(lispify "event_base_loop" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("event_base_loopexit" #.(lispify "event_base_loopexit" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("event_base_loopbreak" #.(lispify "event_base_loopbreak" 'function)) :int
  (arg0 :pointer))

(cffi:defcfun ("event_base_got_exit" #.(lispify "event_base_got_exit" 'function)) :int
  (arg0 :pointer))

(cffi:defcfun ("event_base_got_break" #.(lispify "event_base_got_break" 'function)) :int
  (arg0 :pointer))

(cl:defconstant #.(lispify "EV_TIMEOUT" 'constant) #x01)

(cl:defconstant #.(lispify "EV_READ" 'constant) #x02)

(cl:defconstant #.(lispify "EV_WRITE" 'constant) #x04)

(cl:defconstant #.(lispify "EV_SIGNAL" 'constant) #x08)

(cl:defconstant #.(lispify "EV_PERSIST" 'constant) #x10)

(cl:defconstant #.(lispify "EV_ET" 'constant) #x20)

(cffi:defcfun ("event_new" #.(lispify "event_new" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :short)
  (arg3 :pointer)
  (arg4 :pointer))

(cffi:defcfun ("event_assign" #.(lispify "event_assign" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :short)
  (arg4 :pointer)
  (arg5 :pointer))

(cffi:defcfun ("event_free" #.(lispify "event_free" 'function)) :void
  (arg0 :pointer))

(cffi:defcfun ("event_base_once" #.(lispify "event_base_once" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :short)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer))

(cffi:defcfun ("event_add" #.(lispify "event_add" 'function)) :int
  (ev :pointer)
  (timeout :pointer))

(cffi:defcfun ("event_del" #.(lispify "event_del" 'function)) :int
  (arg0 :pointer))

(cffi:defcfun ("event_active" #.(lispify "event_active" 'function)) :void
  (ev :pointer)
  (res :int)
  (ncalls :short))

(cffi:defcfun ("event_pending" #.(lispify "event_pending" 'function)) :int
  (ev :pointer)
  (events :short)
  (tv :pointer))

(cffi:defcfun ("event_initialized" #.(lispify "event_initialized" 'function)) :int
  (ev :pointer))

(cffi:defcfun ("event_get_fd" #.(lispify "event_get_fd" 'function)) :int
  (ev :pointer))

(cffi:defcfun ("event_get_base" #.(lispify "event_get_base" 'function)) :pointer
  (ev :pointer))

(cffi:defcfun ("event_get_events" #.(lispify "event_get_events" 'function)) :short
  (ev :pointer))

(cffi:defcfun ("event_get_callback" #.(lispify "event_get_callback" 'function)) :pointer
  (ev :pointer))

(cffi:defcfun ("event_get_callback_arg" #.(lispify "event_get_callback_arg" 'function)) :pointer
  (ev :pointer))

(cffi:defcfun ("event_get_assignment" #.(lispify "event_get_assignment" 'function)) :void
  (event :pointer)
  (base_out :pointer)
  (fd_out :pointer)
  (events_out :pointer)
  (callback_out :pointer)
  (arg_out :pointer))

(cffi:defcfun ("event_get_struct_event_size" #.(lispify "event_get_struct_event_size" 'function)) :unsigned-int)

(cffi:defcfun ("event_get_version" #.(lispify "event_get_version" 'function)) :string)

(cffi:defcfun ("event_get_version_number" #.(lispify "event_get_version_number" 'function)) :pointer)

(cl:defconstant #.(lispify "LIBEVENT_VERSION" 'constant) "2.0.20-stable")

(cl:defconstant #.(lispify "LIBEVENT_VERSION_NUMBER" 'constant) #x02001400)

(cl:defconstant #.(lispify "EVENT_MAX_PRIORITIES" 'constant) 256)

(cffi:defcfun ("event_base_priority_init" #.(lispify "event_base_priority_init" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("event_priority_set" #.(lispify "event_priority_set" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("event_base_init_common_timeout" #.(lispify "event_base_init_common_timeout" 'function)) :pointer
  (base :pointer)
  (duration :pointer))

(cffi:defcfun ("event_set_mem_functions" #.(lispify "event_set_mem_functions" 'function)) :void
  (malloc_fn :pointer)
  (realloc_fn :pointer)
  (free_fn :pointer))

(cffi:defcfun ("event_base_dump_events" #.(lispify "event_base_dump_events" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("event_base_gettimeofday_cached" #.(lispify "event_base_gettimeofday_cached" 'function)) :int
  (base :pointer)
  (tv :pointer))

(cl:defconstant #.(lispify "DNS_ERR_NONE" 'constant) 0)

(cl:defconstant #.(lispify "DNS_ERR_FORMAT" 'constant) 1)

(cl:defconstant #.(lispify "DNS_ERR_SERVERFAILED" 'constant) 2)

(cl:defconstant #.(lispify "DNS_ERR_NOTEXIST" 'constant) 3)

(cl:defconstant #.(lispify "DNS_ERR_NOTIMPL" 'constant) 4)

(cl:defconstant #.(lispify "DNS_ERR_REFUSED" 'constant) 5)

(cl:defconstant #.(lispify "DNS_ERR_TRUNCATED" 'constant) 65)

(cl:defconstant #.(lispify "DNS_ERR_UNKNOWN" 'constant) 66)

(cl:defconstant #.(lispify "DNS_ERR_TIMEOUT" 'constant) 67)

(cl:defconstant #.(lispify "DNS_ERR_SHUTDOWN" 'constant) 68)

(cl:defconstant #.(lispify "DNS_ERR_CANCEL" 'constant) 69)

(cl:defconstant #.(lispify "DNS_ERR_NODATA" 'constant) 70)

(cl:defconstant #.(lispify "DNS_IPv4_A" 'constant) 1)

(cl:defconstant #.(lispify "DNS_PTR" 'constant) 2)

(cl:defconstant #.(lispify "DNS_IPv6_AAAA" 'constant) 3)

(cl:defconstant #.(lispify "DNS_QUERY_NO_SEARCH" 'constant) 1)

(cl:defconstant #.(lispify "DNS_OPTION_SEARCH" 'constant) 1)

(cl:defconstant #.(lispify "DNS_OPTION_NAMESERVERS" 'constant) 2)

(cl:defconstant #.(lispify "DNS_OPTION_MISC" 'constant) 4)

(cl:defconstant #.(lispify "DNS_OPTION_HOSTSFILE" 'constant) 8)

(cl:defconstant #.(lispify "DNS_OPTIONS_ALL" 'constant) 15)

(cl:defconstant #.(lispify "DNS_NO_SEARCH" 'constant) 1)

(cffi:defcfun ("evdns_base_new" #.(lispify "evdns_base_new" 'function)) :pointer
  (event_base :pointer)
  (initialize_nameservers :int))

(cffi:defcfun ("evdns_base_free" #.(lispify "evdns_base_free" 'function)) :void
  (base :pointer)
  (fail_requests :int))

(cffi:defcfun ("evdns_err_to_string" #.(lispify "evdns_err_to_string" 'function)) :string
  (err :int))

(cffi:defcfun ("evdns_base_nameserver_add" #.(lispify "evdns_base_nameserver_add" 'function)) :int
  (base :pointer)
  (address :unsigned-long))

(cffi:defcfun ("evdns_base_count_nameservers" #.(lispify "evdns_base_count_nameservers" 'function)) :int
  (base :pointer))

(cffi:defcfun ("evdns_base_clear_nameservers_and_suspend" #.(lispify "evdns_base_clear_nameservers_and_suspend" 'function)) :int
  (base :pointer))

(cffi:defcfun ("evdns_base_resume" #.(lispify "evdns_base_resume" 'function)) :int
  (base :pointer))

(cffi:defcfun ("evdns_base_nameserver_ip_add" #.(lispify "evdns_base_nameserver_ip_add" 'function)) :int
  (base :pointer)
  (ip_as_string :string))

(cffi:defcfun ("evdns_base_nameserver_sockaddr_add" #.(lispify "evdns_base_nameserver_sockaddr_add" 'function)) :int
  (base :pointer)
  (sa :pointer)
  (len :unsigned-int)
  (flags :unsigned-int))

(cffi:defcfun ("evdns_base_resolve_ipv4" #.(lispify "evdns_base_resolve_ipv4" 'function)) :pointer
  (base :pointer)
  (name :string)
  (flags :int)
  (callback :pointer)
  (ptr :pointer))

(cffi:defcfun ("evdns_base_resolve_ipv6" #.(lispify "evdns_base_resolve_ipv6" 'function)) :pointer
  (base :pointer)
  (name :string)
  (flags :int)
  (callback :pointer)
  (ptr :pointer))

(cffi:defcfun ("evdns_base_resolve_reverse" #.(lispify "evdns_base_resolve_reverse" 'function)) :pointer
  (base :pointer)
  (in :pointer)
  (flags :int)
  (callback :pointer)
  (ptr :pointer))

(cffi:defcfun ("evdns_base_resolve_reverse_ipv6" #.(lispify "evdns_base_resolve_reverse_ipv6" 'function)) :pointer
  (base :pointer)
  (in :pointer)
  (flags :int)
  (callback :pointer)
  (ptr :pointer))

(cffi:defcfun ("evdns_cancel_request" #.(lispify "evdns_cancel_request" 'function)) :void
  (base :pointer)
  (req :pointer))

(cffi:defcfun ("evdns_base_set_option" #.(lispify "evdns_base_set_option" 'function)) :int
  (base :pointer)
  (option :string)
  (val :string))

(cffi:defcfun ("evdns_base_resolv_conf_parse" #.(lispify "evdns_base_resolv_conf_parse" 'function)) :int
  (base :pointer)
  (flags :int)
  (filename :string))

(cffi:defcfun ("evdns_base_load_hosts" #.(lispify "evdns_base_load_hosts" 'function)) :int
  (base :pointer)
  (hosts_fname :string))

(cffi:defcfun ("evdns_base_search_clear" #.(lispify "evdns_base_search_clear" 'function)) :void
  (base :pointer))

(cffi:defcfun ("evdns_base_search_add" #.(lispify "evdns_base_search_add" 'function)) :void
  (base :pointer)
  (domain :string))

(cffi:defcfun ("evdns_base_search_ndots_set" #.(lispify "evdns_base_search_ndots_set" 'function)) :void
  (base :pointer)
  (ndots :int))

(cffi:defcfun ("evdns_set_log_fn" #.(lispify "evdns_set_log_fn" 'function)) :void
  (fn :pointer))

(cffi:defcfun ("evdns_set_transaction_id_fn" #.(lispify "evdns_set_transaction_id_fn" 'function)) :void
  (fn :pointer))

(cffi:defcfun ("evdns_set_random_bytes_fn" #.(lispify "evdns_set_random_bytes_fn" 'function)) :void
  (fn :pointer))

(cl:defconstant #.(lispify "EVDNS_ANSWER_SECTION" 'constant) 0)

(cl:defconstant #.(lispify "EVDNS_AUTHORITY_SECTION" 'constant) 1)

(cl:defconstant #.(lispify "EVDNS_ADDITIONAL_SECTION" 'constant) 2)

(cl:defconstant #.(lispify "EVDNS_TYPE_A" 'constant) 1)

(cl:defconstant #.(lispify "EVDNS_TYPE_NS" 'constant) 2)

(cl:defconstant #.(lispify "EVDNS_TYPE_CNAME" 'constant) 5)

(cl:defconstant #.(lispify "EVDNS_TYPE_SOA" 'constant) 6)

(cl:defconstant #.(lispify "EVDNS_TYPE_PTR" 'constant) 12)

(cl:defconstant #.(lispify "EVDNS_TYPE_MX" 'constant) 15)

(cl:defconstant #.(lispify "EVDNS_TYPE_TXT" 'constant) 16)

(cl:defconstant #.(lispify "EVDNS_TYPE_AAAA" 'constant) 28)

(cl:defconstant #.(lispify "EVDNS_QTYPE_AXFR" 'constant) 252)

(cl:defconstant #.(lispify "EVDNS_QTYPE_ALL" 'constant) 255)

(cl:defconstant #.(lispify "EVDNS_CLASS_INET" 'constant) 1)

(cl:defconstant #.(lispify "EVDNS_FLAGS_AA" 'constant) #x400)

(cl:defconstant #.(lispify "EVDNS_FLAGS_RD" 'constant) #x080)

(cffi:defcfun ("evdns_add_server_port_with_base" #.(lispify "evdns_add_server_port_with_base" 'function)) :pointer
  (base :pointer)
  (socket :int)
  (flags :int)
  (callback :pointer)
  (user_data :pointer))

(cffi:defcfun ("evdns_close_server_port" #.(lispify "evdns_close_server_port" 'function)) :void
  (port :pointer))

(cffi:defcfun ("evdns_server_request_set_flags" #.(lispify "evdns_server_request_set_flags" 'function)) :void
  (req :pointer)
  (flags :int))

(cffi:defcfun ("evdns_server_request_add_reply" #.(lispify "evdns_server_request_add_reply" 'function)) :int
  (req :pointer)
  (section :int)
  (name :string)
  (type :int)
  (dns_class :int)
  (ttl :int)
  (datalen :int)
  (is_name :int)
  (data :string))

(cffi:defcfun ("evdns_server_request_add_a_reply" #.(lispify "evdns_server_request_add_a_reply" 'function)) :int
  (req :pointer)
  (name :string)
  (n :int)
  (addrs :pointer)
  (ttl :int))

(cffi:defcfun ("evdns_server_request_add_aaaa_reply" #.(lispify "evdns_server_request_add_aaaa_reply" 'function)) :int
  (req :pointer)
  (name :string)
  (n :int)
  (addrs :pointer)
  (ttl :int))

(cffi:defcfun ("evdns_server_request_add_ptr_reply" #.(lispify "evdns_server_request_add_ptr_reply" 'function)) :int
  (req :pointer)
  (in :pointer)
  (inaddr_name :string)
  (hostname :string)
  (ttl :int))

(cffi:defcfun ("evdns_server_request_add_cname_reply" #.(lispify "evdns_server_request_add_cname_reply" 'function)) :int
  (req :pointer)
  (name :string)
  (cname :string)
  (ttl :int))

(cffi:defcfun ("evdns_server_request_respond" #.(lispify "evdns_server_request_respond" 'function)) :int
  (req :pointer)
  (err :int))

(cffi:defcfun ("evdns_server_request_drop" #.(lispify "evdns_server_request_drop" 'function)) :int
  (req :pointer))

(cffi:defcfun ("evdns_server_request_get_requesting_addr" #.(lispify "evdns_server_request_get_requesting_addr" 'function)) :int
  (_req :pointer)
  (sa :pointer)
  (addr_len :int))

(cffi:defcfun ("evdns_getaddrinfo" #.(lispify "evdns_getaddrinfo" 'function)) :pointer
  (dns_base :pointer)
  (nodename :string)
  (servname :string)
  (hints_in :pointer)
  (cb :pointer)
  (arg :pointer))

(cffi:defcfun ("evdns_getaddrinfo_cancel" #.(lispify "evdns_getaddrinfo_cancel" 'function)) :void
  (req :pointer))

(cl:defconstant #.(lispify "BEV_EVENT_READING" 'constant) #x01)

(cl:defconstant #.(lispify "BEV_EVENT_WRITING" 'constant) #x02)

(cl:defconstant #.(lispify "BEV_EVENT_EOF" 'constant) #x10)

(cl:defconstant #.(lispify "BEV_EVENT_ERROR" 'constant) #x20)

(cl:defconstant #.(lispify "BEV_EVENT_TIMEOUT" 'constant) #x40)

(cl:defconstant #.(lispify "BEV_EVENT_CONNECTED" 'constant) #x80)

(cffi:defcenum #.(lispify "bufferevent_options" 'enumname)
	(#.(lispify "BEV_OPT_CLOSE_ON_FREE" 'enumvalue :keyword) #.(cl:ash 1 0))
	(#.(lispify "BEV_OPT_THREADSAFE" 'enumvalue :keyword) #.(cl:ash 1 1))
	(#.(lispify "BEV_OPT_DEFER_CALLBACKS" 'enumvalue :keyword) #.(cl:ash 1 2))
	(#.(lispify "BEV_OPT_UNLOCK_CALLBACKS" 'enumvalue :keyword) #.(cl:ash 1 3)))

(cffi:defcfun ("bufferevent_socket_new" #.(lispify "bufferevent_socket_new" 'function)) :pointer
  (base :pointer)
  (fd :int)
  (options :int))

(cffi:defcfun ("bufferevent_socket_connect" #.(lispify "bufferevent_socket_connect" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("bufferevent_socket_connect_hostname" #.(lispify "bufferevent_socket_connect_hostname" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :string)
  (arg4 :int))

(cffi:defcfun ("bufferevent_socket_get_dns_error" #.(lispify "bufferevent_socket_get_dns_error" 'function)) :int
  (bev :pointer))

(cffi:defcfun ("bufferevent_base_set" #.(lispify "bufferevent_base_set" 'function)) :int
  (base :pointer)
  (bufev :pointer))

(cffi:defcfun ("bufferevent_get_base" #.(lispify "bufferevent_get_base" 'function)) :pointer
  (bev :pointer))

(cffi:defcfun ("bufferevent_priority_set" #.(lispify "bufferevent_priority_set" 'function)) :int
  (bufev :pointer)
  (pri :int))

(cffi:defcfun ("bufferevent_free" #.(lispify "bufferevent_free" 'function)) :void
  (bufev :pointer))

(cffi:defcfun ("bufferevent_setcb" #.(lispify "bufferevent_setcb" 'function)) :void
  (bufev :pointer)
  (readcb :pointer)
  (writecb :pointer)
  (eventcb :pointer)
  (cbarg :pointer))

(cffi:defcfun ("bufferevent_setfd" #.(lispify "bufferevent_setfd" 'function)) :int
  (bufev :pointer)
  (fd :int))

(cffi:defcfun ("bufferevent_getfd" #.(lispify "bufferevent_getfd" 'function)) :int
  (bufev :pointer))

(cffi:defcfun ("bufferevent_get_underlying" #.(lispify "bufferevent_get_underlying" 'function)) :pointer
  (bufev :pointer))

(cffi:defcfun ("bufferevent_write" #.(lispify "bufferevent_write" 'function)) :int
  (bufev :pointer)
  (data :pointer)
  (size :unsigned-int))

(cffi:defcfun ("bufferevent_write_buffer" #.(lispify "bufferevent_write_buffer" 'function)) :int
  (bufev :pointer)
  (buf :pointer))

(cffi:defcfun ("bufferevent_read" #.(lispify "bufferevent_read" 'function)) :unsigned-int
  (bufev :pointer)
  (data :pointer)
  (size :unsigned-int))

(cffi:defcfun ("bufferevent_read_buffer" #.(lispify "bufferevent_read_buffer" 'function)) :int
  (bufev :pointer)
  (buf :pointer))

(cffi:defcfun ("bufferevent_get_input" #.(lispify "bufferevent_get_input" 'function)) :pointer
  (bufev :pointer))

(cffi:defcfun ("bufferevent_get_output" #.(lispify "bufferevent_get_output" 'function)) :pointer
  (bufev :pointer))

(cffi:defcfun ("bufferevent_enable" #.(lispify "bufferevent_enable" 'function)) :int
  (bufev :pointer)
  (event :short))

(cffi:defcfun ("bufferevent_disable" #.(lispify "bufferevent_disable" 'function)) :int
  (bufev :pointer)
  (event :short))

(cffi:defcfun ("bufferevent_get_enabled" #.(lispify "bufferevent_get_enabled" 'function)) :short
  (bufev :pointer))

(cffi:defcfun ("bufferevent_set_timeouts" #.(lispify "bufferevent_set_timeouts" 'function)) :int
  (bufev :pointer)
  (timeout_read :pointer)
  (timeout_write :pointer))

(cffi:defcfun ("bufferevent_setwatermark" #.(lispify "bufferevent_setwatermark" 'function)) :void
  (bufev :pointer)
  (events :short)
  (lowmark :unsigned-int)
  (highmark :unsigned-int))

(cffi:defcfun ("bufferevent_lock" #.(lispify "bufferevent_lock" 'function)) :void
  (bufev :pointer))

(cffi:defcfun ("bufferevent_unlock" #.(lispify "bufferevent_unlock" 'function)) :void
  (bufev :pointer))

(cffi:defcenum #.(lispify "bufferevent_flush_mode" 'enumname)
	(#.(lispify "BEV_NORMAL" 'enumvalue :keyword) #.0)
	(#.(lispify "BEV_FLUSH" 'enumvalue :keyword) #.1)
	(#.(lispify "BEV_FINISHED" 'enumvalue :keyword) #.2))

(cffi:defcfun ("bufferevent_flush" #.(lispify "bufferevent_flush" 'function)) :int
  (bufev :pointer)
  (iotype :short)
  (mode #.(lispify "bufferevent_flush_mode" 'enumname)))

(cffi:defcenum #.(lispify "bufferevent_filter_result" 'enumname)
	(#.(lispify "BEV_OK" 'enumvalue :keyword) #.0)
	(#.(lispify "BEV_NEED_MORE" 'enumvalue :keyword) #.1)
	(#.(lispify "BEV_ERROR" 'enumvalue :keyword) #.2))

(cffi:defcfun ("bufferevent_filter_new" #.(lispify "bufferevent_filter_new" 'function)) :pointer
  (underlying :pointer)
  (input_filter :pointer)
  (output_filter :pointer)
  (options :int)
  (free_context :pointer)
  (ctx :pointer))

(cffi:defcfun ("bufferevent_pair_new" #.(lispify "bufferevent_pair_new" 'function)) :int
  (base :pointer)
  (options :int)
  (pair :pointer))

(cffi:defcfun ("bufferevent_pair_get_partner" #.(lispify "bufferevent_pair_get_partner" 'function)) :pointer
  (bev :pointer))

(cffi:defcfun ("ev_token_bucket_cfg_new" #.(lispify "ev_token_bucket_cfg_new" 'function)) :pointer
  (read_rate :unsigned-int)
  (read_burst :unsigned-int)
  (write_rate :unsigned-int)
  (write_burst :unsigned-int)
  (tick_len :pointer))

(cffi:defcfun ("ev_token_bucket_cfg_free" #.(lispify "ev_token_bucket_cfg_free" 'function)) :void
  (cfg :pointer))

(cffi:defcfun ("bufferevent_set_rate_limit" #.(lispify "bufferevent_set_rate_limit" 'function)) :int
  (bev :pointer)
  (cfg :pointer))

(cffi:defcfun ("bufferevent_rate_limit_group_new" #.(lispify "bufferevent_rate_limit_group_new" 'function)) :pointer
  (base :pointer)
  (cfg :pointer))

(cffi:defcfun ("bufferevent_rate_limit_group_set_cfg" #.(lispify "bufferevent_rate_limit_group_set_cfg" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("bufferevent_rate_limit_group_set_min_share" #.(lispify "bufferevent_rate_limit_group_set_min_share" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-int))

(cffi:defcfun ("bufferevent_rate_limit_group_free" #.(lispify "bufferevent_rate_limit_group_free" 'function)) :void
  (arg0 :pointer))

(cffi:defcfun ("bufferevent_add_to_rate_limit_group" #.(lispify "bufferevent_add_to_rate_limit_group" 'function)) :int
  (bev :pointer)
  (g :pointer))

(cffi:defcfun ("bufferevent_remove_from_rate_limit_group" #.(lispify "bufferevent_remove_from_rate_limit_group" 'function)) :int
  (bev :pointer))

(cffi:defcfun ("bufferevent_get_read_limit" #.(lispify "bufferevent_get_read_limit" 'function)) :pointer
  (bev :pointer))

(cffi:defcfun ("bufferevent_get_write_limit" #.(lispify "bufferevent_get_write_limit" 'function)) :pointer
  (bev :pointer))

(cffi:defcfun ("bufferevent_get_max_to_read" #.(lispify "bufferevent_get_max_to_read" 'function)) :pointer
  (bev :pointer))

(cffi:defcfun ("bufferevent_get_max_to_write" #.(lispify "bufferevent_get_max_to_write" 'function)) :pointer
  (bev :pointer))

(cffi:defcfun ("bufferevent_rate_limit_group_get_read_limit" #.(lispify "bufferevent_rate_limit_group_get_read_limit" 'function)) :pointer
  (arg0 :pointer))

(cffi:defcfun ("bufferevent_rate_limit_group_get_write_limit" #.(lispify "bufferevent_rate_limit_group_get_write_limit" 'function)) :pointer
  (arg0 :pointer))

(cffi:defcfun ("bufferevent_decrement_read_limit" #.(lispify "bufferevent_decrement_read_limit" 'function)) :int
  (bev :pointer)
  (decr :pointer))

(cffi:defcfun ("bufferevent_decrement_write_limit" #.(lispify "bufferevent_decrement_write_limit" 'function)) :int
  (bev :pointer)
  (decr :pointer))

(cffi:defcfun ("bufferevent_rate_limit_group_decrement_read" #.(lispify "bufferevent_rate_limit_group_decrement_read" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("bufferevent_rate_limit_group_decrement_write" #.(lispify "bufferevent_rate_limit_group_decrement_write" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("bufferevent_rate_limit_group_get_totals" #.(lispify "bufferevent_rate_limit_group_get_totals" 'function)) :void
  (grp :pointer)
  (total_read_out :pointer)
  (total_written_out :pointer))

(cffi:defcfun ("bufferevent_rate_limit_group_reset_totals" #.(lispify "bufferevent_rate_limit_group_reset_totals" 'function)) :void
  (grp :pointer))

(cffi:defcstruct #.(lispify "evbuffer_ptr" 'classname)
	(#.(lispify "pos" 'slotname) :pointer)
	(#.(lispify "_internal" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "evbuffer_ptr__internal" 'classname)
	(#.(lispify "chain" 'slotname) :pointer)
	(#.(lispify "pos_in_chain" 'slotname) :unsigned-int))

(cffi:defcstruct #.(lispify "evbuffer_iovec" 'classname)
	(#.(lispify "iov_base" 'slotname) :pointer)
	(#.(lispify "iov_len" 'slotname) :unsigned-int))

(cffi:defcfun ("evbuffer_new" #.(lispify "evbuffer_new" 'function)) :pointer)

(cffi:defcfun ("evbuffer_free" #.(lispify "evbuffer_free" 'function)) :void
  (buf :pointer))

(cffi:defcfun ("evbuffer_enable_locking" #.(lispify "evbuffer_enable_locking" 'function)) :int
  (buf :pointer)
  (lock :pointer))

(cffi:defcfun ("evbuffer_lock" #.(lispify "evbuffer_lock" 'function)) :void
  (buf :pointer))

(cffi:defcfun ("evbuffer_unlock" #.(lispify "evbuffer_unlock" 'function)) :void
  (buf :pointer))

(cl:defconstant #.(lispify "EVBUFFER_FLAG_DRAINS_TO_FD" 'constant) 1)

(cffi:defcfun ("evbuffer_set_flags" #.(lispify "evbuffer_set_flags" 'function)) :int
  (buf :pointer)
  (flags :pointer))

(cffi:defcfun ("evbuffer_clear_flags" #.(lispify "evbuffer_clear_flags" 'function)) :int
  (buf :pointer)
  (flags :pointer))

(cffi:defcfun ("evbuffer_get_length" #.(lispify "evbuffer_get_length" 'function)) :unsigned-int
  (buf :pointer))

(cffi:defcfun ("evbuffer_get_contiguous_space" #.(lispify "evbuffer_get_contiguous_space" 'function)) :unsigned-int
  (buf :pointer))

(cffi:defcfun ("evbuffer_expand" #.(lispify "evbuffer_expand" 'function)) :int
  (buf :pointer)
  (datlen :unsigned-int))

(cffi:defcfun ("evbuffer_reserve_space" #.(lispify "evbuffer_reserve_space" 'function)) :int
  (buf :pointer)
  (size :pointer)
  (vec :pointer)
  (n_vec :int))

(cffi:defcfun ("evbuffer_commit_space" #.(lispify "evbuffer_commit_space" 'function)) :int
  (buf :pointer)
  (vec :pointer)
  (n_vecs :int))

(cffi:defcfun ("evbuffer_add" #.(lispify "evbuffer_add" 'function)) :int
  (buf :pointer)
  (data :pointer)
  (datlen :unsigned-int))

(cffi:defcfun ("evbuffer_remove" #.(lispify "evbuffer_remove" 'function)) :int
  (buf :pointer)
  (data :pointer)
  (datlen :unsigned-int))

(cffi:defcfun ("evbuffer_copyout" #.(lispify "evbuffer_copyout" 'function)) :pointer
  (buf :pointer)
  (data_out :pointer)
  (datlen :unsigned-int))

(cffi:defcfun ("evbuffer_remove_buffer" #.(lispify "evbuffer_remove_buffer" 'function)) :int
  (src :pointer)
  (dst :pointer)
  (datlen :unsigned-int))

(cffi:defcenum #.(lispify "evbuffer_eol_style" 'enumname)
	#.(lispify "EVBUFFER_EOL_ANY" 'enumvalue :keyword)
	#.(lispify "EVBUFFER_EOL_CRLF" 'enumvalue :keyword)
	#.(lispify "EVBUFFER_EOL_CRLF_STRICT" 'enumvalue :keyword)
	#.(lispify "EVBUFFER_EOL_LF" 'enumvalue :keyword))

(cffi:defcfun ("evbuffer_readln" #.(lispify "evbuffer_readln" 'function)) :string
  (buffer :pointer)
  (n_read_out :pointer)
  (eol_style #.(lispify "evbuffer_eol_style" 'enumname)))

(cffi:defcfun ("evbuffer_add_buffer" #.(lispify "evbuffer_add_buffer" 'function)) :int
  (outbuf :pointer)
  (inbuf :pointer))

(cffi:defcfun ("evbuffer_add_reference" #.(lispify "evbuffer_add_reference" 'function)) :int
  (outbuf :pointer)
  (data :pointer)
  (datlen :unsigned-int)
  (cleanupfn :pointer)
  (cleanupfn_arg :pointer))

(cffi:defcfun ("evbuffer_add_file" #.(lispify "evbuffer_add_file" 'function)) :int
  (outbuf :pointer)
  (fd :int)
  (offset :pointer)
  (length :pointer))

(cffi:defcfun ("evbuffer_add_printf" #.(lispify "evbuffer_add_printf" 'function)) :int
  (buf :pointer)
  (fmt :string)
  &rest)

(cffi:defcfun ("evbuffer_add_vprintf" #.(lispify "evbuffer_add_vprintf" 'function)) :int
  (buf :pointer)
  (fmt :string)
  (ap :pointer))

(cffi:defcfun ("evbuffer_drain" #.(lispify "evbuffer_drain" 'function)) :int
  (buf :pointer)
  (len :unsigned-int))

(cffi:defcfun ("evbuffer_write" #.(lispify "evbuffer_write" 'function)) :int
  (buffer :pointer)
  (fd :int))

(cffi:defcfun ("evbuffer_write_atmost" #.(lispify "evbuffer_write_atmost" 'function)) :int
  (buffer :pointer)
  (fd :int)
  (howmuch :pointer))

(cffi:defcfun ("evbuffer_read" #.(lispify "evbuffer_read" 'function)) :int
  (buffer :pointer)
  (fd :int)
  (howmuch :int))

(cffi:defcfun ("evbuffer_search" #.(lispify "evbuffer_search" 'function)) #.(lispify "evbuffer_ptr" 'classname)
  (buffer :pointer)
  (what :string)
  (len :unsigned-int)
  (start :pointer))

(cffi:defcfun ("evbuffer_search_range" #.(lispify "evbuffer_search_range" 'function)) #.(lispify "evbuffer_ptr" 'classname)
  (buffer :pointer)
  (what :string)
  (len :unsigned-int)
  (start :pointer)
  (end :pointer))

(cffi:defcenum #.(lispify "evbuffer_ptr_how" 'enumname)
	#.(lispify "EVBUFFER_PTR_SET" 'enumvalue :keyword)
	#.(lispify "EVBUFFER_PTR_ADD" 'enumvalue :keyword))

(cffi:defcfun ("evbuffer_ptr_set" #.(lispify "evbuffer_ptr_set" 'function)) :int
  (buffer :pointer)
  (ptr :pointer)
  (position :unsigned-int)
  (how #.(lispify "evbuffer_ptr_how" 'enumname)))

(cffi:defcfun ("evbuffer_search_eol" #.(lispify "evbuffer_search_eol" 'function)) #.(lispify "evbuffer_ptr" 'classname)
  (buffer :pointer)
  (start :pointer)
  (eol_len_out :pointer)
  (eol_style #.(lispify "evbuffer_eol_style" 'enumname)))

(cffi:defcfun ("evbuffer_peek" #.(lispify "evbuffer_peek" 'function)) :int
  (buffer :pointer)
  (len :pointer)
  (start_at :pointer)
  (vec_out :pointer)
  (n_vec :int))

(cffi:defcstruct #.(lispify "evbuffer_cb_info" 'classname)
	(#.(lispify "orig_size" 'slotname) :unsigned-int)
	(#.(lispify "n_added" 'slotname) :unsigned-int)
	(#.(lispify "n_deleted" 'slotname) :unsigned-int))

(cffi:defcfun ("evbuffer_add_cb" #.(lispify "evbuffer_add_cb" 'function)) :pointer
  (buffer :pointer)
  (cb :pointer)
  (cbarg :pointer))

(cffi:defcfun ("evbuffer_remove_cb_entry" #.(lispify "evbuffer_remove_cb_entry" 'function)) :int
  (buffer :pointer)
  (ent :pointer))

(cffi:defcfun ("evbuffer_remove_cb" #.(lispify "evbuffer_remove_cb" 'function)) :int
  (buffer :pointer)
  (cb :pointer)
  (cbarg :pointer))

(cl:defconstant #.(lispify "EVBUFFER_CB_ENABLED" 'constant) 1)

(cffi:defcfun ("evbuffer_cb_set_flags" #.(lispify "evbuffer_cb_set_flags" 'function)) :int
  (buffer :pointer)
  (cb :pointer)
  (flags :pointer))

(cffi:defcfun ("evbuffer_cb_clear_flags" #.(lispify "evbuffer_cb_clear_flags" 'function)) :int
  (buffer :pointer)
  (cb :pointer)
  (flags :pointer))

(cffi:defcfun ("evbuffer_pullup" #.(lispify "evbuffer_pullup" 'function)) :pointer
  (buf :pointer)
  (size :pointer))

(cffi:defcfun ("evbuffer_prepend" #.(lispify "evbuffer_prepend" 'function)) :int
  (buf :pointer)
  (data :pointer)
  (size :unsigned-int))

(cffi:defcfun ("evbuffer_prepend_buffer" #.(lispify "evbuffer_prepend_buffer" 'function)) :int
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("evbuffer_freeze" #.(lispify "evbuffer_freeze" 'function)) :int
  (buf :pointer)
  (at_front :int))

(cffi:defcfun ("evbuffer_unfreeze" #.(lispify "evbuffer_unfreeze" 'function)) :int
  (buf :pointer)
  (at_front :int))

(cffi:defcfun ("evbuffer_defer_callbacks" #.(lispify "evbuffer_defer_callbacks" 'function)) :int
  (buffer :pointer)
  (base :pointer))

(cl:defconstant #.(lispify "LEV_OPT_LEAVE_SOCKETS_BLOCKING" 'constant) (cl:ash 1 0))

(cl:defconstant #.(lispify "LEV_OPT_CLOSE_ON_FREE" 'constant) (cl:ash 1 1))

(cl:defconstant #.(lispify "LEV_OPT_CLOSE_ON_EXEC" 'constant) (cl:ash 1 2))

(cl:defconstant #.(lispify "LEV_OPT_REUSEABLE" 'constant) (cl:ash 1 3))

(cl:defconstant #.(lispify "LEV_OPT_THREADSAFE" 'constant) (cl:ash 1 4))

(cffi:defcfun ("evconnlistener_new" #.(lispify "evconnlistener_new" 'function)) :pointer
  (base :pointer)
  (cb :pointer)
  (ptr :pointer)
  (flags :unsigned-int)
  (backlog :int)
  (fd :int))

(cffi:defcfun ("evconnlistener_new_bind" #.(lispify "evconnlistener_new_bind" 'function)) :pointer
  (base :pointer)
  (cb :pointer)
  (ptr :pointer)
  (flags :unsigned-int)
  (backlog :int)
  (sa :pointer)
  (socklen :int))

(cffi:defcfun ("evconnlistener_free" #.(lispify "evconnlistener_free" 'function)) :void
  (lev :pointer))

(cffi:defcfun ("evconnlistener_enable" #.(lispify "evconnlistener_enable" 'function)) :int
  (lev :pointer))

(cffi:defcfun ("evconnlistener_disable" #.(lispify "evconnlistener_disable" 'function)) :int
  (lev :pointer))

(cffi:defcfun ("evconnlistener_get_base" #.(lispify "evconnlistener_get_base" 'function)) :pointer
  (lev :pointer))

(cffi:defcfun ("evconnlistener_get_fd" #.(lispify "evconnlistener_get_fd" 'function)) :int
  (lev :pointer))

(cffi:defcfun ("evconnlistener_set_cb" #.(lispify "evconnlistener_set_cb" 'function)) :void
  (lev :pointer)
  (cb :pointer)
  (arg :pointer))

(cffi:defcfun ("evconnlistener_set_error_cb" #.(lispify "evconnlistener_set_error_cb" 'function)) :void
  (lev :pointer)
  (errorcb :pointer))


